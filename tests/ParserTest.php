<?php
declare(strict_types=1);

namespace Konecnyjakub\PHPTRunner;

use MyTester\Attributes\TestSuite;
use MyTester\TestCase;

#[TestSuite("PHPT parser")]
final class ParserTest extends TestCase
{
    public function testParse(): void
    {
        $parser = new Parser();

        $result = $parser->parse(__DIR__ . DIRECTORY_SEPARATOR . "skipped_test.phpt");
        $this->assertSame("Skipped test", $result->testName);
        $this->assertSame("", $result->testDescription);
        $this->assertSame("<?php echo \"skip\"; ?>", $result->skipCode);
        $this->assertSame([], $result->conflictingKeys);
        $this->assertSame([], $result->requiredExtensions);
        $this->assertSame("", $result->input);
        $this->assertSame([], $result->iniSettings);
        $this->assertSame("", $result->arguments);
        $this->assertSame([], $result->envVariables);
        $this->assertSame("<?php echo \"one\"; ?>", $result->testCode);
        $this->assertSame("", $result->testFile);
        $this->assertSame([], $result->testRedirects);
        $this->assertFalse($result->requiresCgiBinary);
        $this->assertSame(false, $result->supposedToFail);
        $this->assertSame(false, $result->flaky);
        $this->assertSame([], $result->expectedHeaders);
        $this->assertSame("two", $result->expectedText);
        $this->assertSame("", $result->expectedTextFile);
        $this->assertSame("", $result->expectedPattern);
        $this->assertSame("", $result->expectedPatternFile);
        $this->assertSame("", $result->expectedRegex);
        $this->assertSame("", $result->expectedRegexFile);
        $this->assertSame("", $result->cleanCode);

        $result = $parser->parse(__DIR__ . DIRECTORY_SEPARATOR . "test.phpt");
        $this->assertSame("Test", $result->testName);
        $this->assertSame("Just a basic test", $result->testDescription);
        $this->assertSame("", $result->skipCode);
        $this->assertSame([], $result->conflictingKeys);
        $this->assertSame([], $result->requiredExtensions);
        $this->assertSame("", $result->input);
        $this->assertSame([], $result->iniSettings);
        $this->assertSame("", $result->arguments);
        $this->assertSame([], $result->envVariables);
        $this->assertSame("<?php" . PHP_EOL . "echo \"test123\";" . PHP_EOL . "?>", $result->testCode);
        $this->assertSame("", $result->testFile);
        $this->assertSame([], $result->testRedirects);
        $this->assertFalse($result->requiresCgiBinary);
        $this->assertSame(false, $result->supposedToFail);
        $this->assertSame(false, $result->flaky);
        $this->assertSame([], $result->expectedHeaders);
        $this->assertSame("test123", $result->expectedText);
        $this->assertSame("", $result->expectedTextFile);
        $this->assertSame("", $result->expectedPattern);
        $this->assertSame("", $result->expectedPatternFile);
        $this->assertSame("", $result->expectedRegex);
        $this->assertSame("", $result->expectedRegexFile);
        $this->assertSame("", $result->cleanCode);

        $result = $parser->parse(__DIR__ . DIRECTORY_SEPARATOR . "test_env.phpt");
        $this->assertSame("Test env", $result->testName);
        $this->assertSame("", $result->testDescription);
        $this->assertSame("", $result->skipCode);
        $this->assertSame([], $result->conflictingKeys);
        $this->assertSame([], $result->requiredExtensions);
        $this->assertSame("", $result->input);
        $this->assertSame([], $result->iniSettings);
        $this->assertSame("", $result->arguments);
        $this->assertSame(["one" => "abc", ], $result->envVariables);
        $this->assertSame("<?php echo getenv(\"one\"); ?>", $result->testCode);
        $this->assertSame("", $result->testFile);
        $this->assertSame([], $result->testRedirects);
        $this->assertFalse($result->requiresCgiBinary);
        $this->assertSame(false, $result->supposedToFail);
        $this->assertSame(false, $result->flaky);
        $this->assertSame([], $result->expectedHeaders);
        $this->assertSame("abc", $result->expectedText);
        $this->assertSame("", $result->expectedTextFile);
        $this->assertSame("", $result->expectedPattern);
        $this->assertSame("", $result->expectedPatternFile);
        $this->assertSame("", $result->expectedRegex);
        $this->assertSame("", $result->expectedRegexFile);
        $this->assertSame("", $result->cleanCode);

        $result = $parser->parse(__DIR__ . DIRECTORY_SEPARATOR . "test_args.phpt");
        $this->assertSame("Test args", $result->testName);
        $this->assertSame("", $result->testDescription);
        $this->assertSame("", $result->skipCode);
        $this->assertSame([], $result->conflictingKeys);
        $this->assertSame([], $result->requiredExtensions);
        $this->assertSame("", $result->input);
        $this->assertSame([], $result->iniSettings);
        $this->assertSame("--one=abc --two def", $result->arguments);
        $this->assertSame([], $result->envVariables);
        $this->assertSame("<?php var_dump(\$argv[1] === \"--one=abc\" && \$argv[2] === \"--two\" && \$argv[3] === \"def\"); ?>", $result->testCode);
        $this->assertSame("", $result->testFile);
        $this->assertSame([], $result->testRedirects);
        $this->assertFalse($result->requiresCgiBinary);
        $this->assertSame(false, $result->supposedToFail);
        $this->assertSame(false, $result->flaky);
        $this->assertSame([], $result->expectedHeaders);
        $this->assertSame("bool(true)", $result->expectedText);
        $this->assertSame("", $result->expectedTextFile);
        $this->assertSame("", $result->expectedPattern);
        $this->assertSame("", $result->expectedPatternFile);
        $this->assertSame("", $result->expectedRegex);
        $this->assertSame("", $result->expectedRegexFile);
        $this->assertSame("", $result->cleanCode);

        $result = $parser->parse(__DIR__ . DIRECTORY_SEPARATOR . "test_ini.phpt");
        $this->assertSame("Test ini", $result->testName);
        $this->assertSame("", $result->testDescription);
        $this->assertSame("", $result->skipCode);
        $this->assertSame([], $result->conflictingKeys);
        $this->assertSame([], $result->requiredExtensions);
        $this->assertSame("", $result->input);
        $this->assertSame(["allow_url_fopen" => "0", ], $result->iniSettings);
        $this->assertSame("", $result->arguments);
        $this->assertSame([], $result->envVariables);
        $this->assertSame("<?php echo ini_get(\"allow_url_fopen\"); ?>", $result->testCode);
        $this->assertSame("", $result->testFile);
        $this->assertSame([], $result->testRedirects);
        $this->assertFalse($result->requiresCgiBinary);
        $this->assertSame(false, $result->supposedToFail);
        $this->assertSame(false, $result->flaky);
        $this->assertSame([], $result->expectedHeaders);
        $this->assertSame("0", $result->expectedText);
        $this->assertSame("", $result->expectedTextFile);
        $this->assertSame("", $result->expectedPattern);
        $this->assertSame("", $result->expectedPatternFile);
        $this->assertSame("", $result->expectedRegex);
        $this->assertSame("", $result->expectedRegexFile);
        $this->assertSame("", $result->cleanCode);

        $result = $parser->parse(__DIR__ . DIRECTORY_SEPARATOR . "test_input.phpt");
        $this->assertSame("Test input", $result->testName);
        $this->assertSame("", $result->testDescription);
        $this->assertSame("", $result->skipCode);
        $this->assertSame([], $result->conflictingKeys);
        $this->assertSame([], $result->requiredExtensions);
        $this->assertSame("first line" . PHP_EOL . "second line", $result->input);
        $this->assertSame([], $result->iniSettings);
        $this->assertSame("", $result->arguments);
        $this->assertSame([], $result->envVariables);
        $this->assertSame("<?php echo stream_get_contents(STDIN); ?>", $result->testCode);
        $this->assertSame("", $result->testFile);
        $this->assertSame([], $result->testRedirects);
        $this->assertFalse($result->requiresCgiBinary);
        $this->assertSame(false, $result->supposedToFail);
        $this->assertSame(false, $result->flaky);
        $this->assertSame([], $result->expectedHeaders);
        $this->assertSame("first line" . PHP_EOL . "second line", $result->expectedText);
        $this->assertSame("", $result->expectedTextFile);
        $this->assertSame("", $result->expectedPattern);
        $this->assertSame("", $result->expectedPatternFile);
        $this->assertSame("", $result->expectedRegex);
        $this->assertSame("", $result->expectedRegexFile);
        $this->assertSame("", $result->cleanCode);

        $result = $parser->parse(__DIR__ . DIRECTORY_SEPARATOR . "test_xfail.phpt");
        $this->assertSame("Failing test", $result->testName);
        $this->assertSame("", $result->testDescription);
        $this->assertSame("", $result->skipCode);
        $this->assertSame([], $result->conflictingKeys);
        $this->assertSame([], $result->requiredExtensions);
        $this->assertSame("", $result->input);
        $this->assertSame([], $result->iniSettings);
        $this->assertSame("", $result->arguments);
        $this->assertSame([], $result->envVariables);
        $this->assertSame("<?php" . PHP_EOL . "echo \"test123\";" . PHP_EOL . "?>", $result->testCode);
        $this->assertSame("", $result->testFile);
        $this->assertSame([], $result->testRedirects);
        $this->assertFalse($result->requiresCgiBinary);
        $this->assertSame(true, $result->supposedToFail);
        $this->assertSame(false, $result->flaky);
        $this->assertSame([], $result->expectedHeaders);
        $this->assertSame("test1234", $result->expectedText);
        $this->assertSame("", $result->expectedTextFile);
        $this->assertSame("", $result->expectedPattern);
        $this->assertSame("", $result->expectedPatternFile);
        $this->assertSame("", $result->expectedRegex);
        $this->assertSame("", $result->expectedRegexFile);
        $this->assertSame("", $result->cleanCode);

        $result = $parser->parse(__DIR__ . DIRECTORY_SEPARATOR . "test_flaky.phpt");
        $this->assertSame("Flaky test", $result->testName);
        $this->assertSame("", $result->testDescription);
        $this->assertSame("", $result->skipCode);
        $this->assertSame([], $result->conflictingKeys);
        $this->assertSame([], $result->requiredExtensions);
        $this->assertSame("", $result->input);
        $this->assertSame([], $result->iniSettings);
        $this->assertSame("", $result->arguments);
        $this->assertSame([], $result->envVariables);
        $this->assertSame("<?php" . PHP_EOL . "echo rand(0, 1);" . PHP_EOL . "?>", $result->testCode);
        $this->assertSame("", $result->testFile);
        $this->assertSame([], $result->testRedirects);
        $this->assertFalse($result->requiresCgiBinary);
        $this->assertSame(false, $result->supposedToFail);
        $this->assertSame("This is random", $result->flaky);
        $this->assertSame([], $result->expectedHeaders);
        $this->assertSame("1", $result->expectedText);
        $this->assertSame("", $result->expectedTextFile);
        $this->assertSame("", $result->expectedPattern);
        $this->assertSame("", $result->expectedPatternFile);
        $this->assertSame("", $result->expectedRegex);
        $this->assertSame("", $result->expectedRegexFile);
        $this->assertSame("", $result->cleanCode);

        $result = $parser->parse(__DIR__ . DIRECTORY_SEPARATOR . "test_conflicts.phpt");
        $this->assertSame("Conflicting test", $result->testName);
        $this->assertSame("", $result->testDescription);
        $this->assertSame("", $result->skipCode);
        $this->assertSame(["one", "two", ], $result->conflictingKeys);
        $this->assertSame([], $result->requiredExtensions);
        $this->assertSame("", $result->input);
        $this->assertSame([], $result->iniSettings);
        $this->assertSame("", $result->arguments);
        $this->assertSame([], $result->envVariables);
        $this->assertSame("<?php" . PHP_EOL . "echo \"test123\";" . PHP_EOL . "?>", $result->testCode);
        $this->assertSame("", $result->testFile);
        $this->assertSame([], $result->testRedirects);
        $this->assertFalse($result->requiresCgiBinary);
        $this->assertSame(false, $result->supposedToFail);
        $this->assertSame(false, $result->flaky);
        $this->assertSame([], $result->expectedHeaders);
        $this->assertSame("test123", $result->expectedText);
        $this->assertSame("", $result->expectedTextFile);
        $this->assertSame("", $result->expectedPattern);
        $this->assertSame("", $result->expectedPatternFile);
        $this->assertSame("", $result->expectedRegex);
        $this->assertSame("", $result->expectedRegexFile);
        $this->assertSame("", $result->cleanCode);

        $result = $parser->parse(__DIR__ . DIRECTORY_SEPARATOR . "test_expected_headers.phpt");
        $this->assertSame("Test headers", $result->testName);
        $this->assertSame("", $result->testDescription);
        $this->assertSame("", $result->skipCode);
        $this->assertSame([], $result->conflictingKeys);
        $this->assertSame([], $result->requiredExtensions);
        $this->assertSame("", $result->input);
        $this->assertSame([], $result->iniSettings);
        $this->assertSame("", $result->arguments);
        $this->assertSame([], $result->envVariables);
        $this->assertSame(
            "<?php" . PHP_EOL . "header(\"Content-type: text/plain; charset=UTF-8\");" . PHP_EOL . "header(\"Pragma: no-cache\");" . PHP_EOL . "echo \"test123\";" . PHP_EOL . "?>",
            $result->testCode
        );
        $this->assertSame("", $result->testFile);
        $this->assertSame([], $result->testRedirects);
        $this->assertFalse($result->requiresCgiBinary);
        $this->assertSame(false, $result->supposedToFail);
        $this->assertSame(false, $result->flaky);
        $this->assertSame(
            ["Content-type" => "text/plain; charset=UTF-8", "Pragma" => "no-cache", ],
            $result->expectedHeaders
        );
        $this->assertSame("test123", $result->expectedText);
        $this->assertSame("", $result->expectedTextFile);
        $this->assertSame("", $result->expectedPattern);
        $this->assertSame("", $result->expectedPatternFile);
        $this->assertSame("", $result->expectedRegex);
        $this->assertSame("", $result->expectedRegexFile);
        $this->assertSame("", $result->cleanCode);

        $result = $parser->parse(__DIR__ . DIRECTORY_SEPARATOR . "test_clean.phpt");
        $this->assertSame("", $result->testDescription);
        $this->assertSame("Test clean", $result->testName);
        $this->assertSame("", $result->skipCode);
        $this->assertSame([], $result->conflictingKeys);
        $this->assertSame([], $result->requiredExtensions);
        $this->assertSame("", $result->input);
        $this->assertSame([], $result->iniSettings);
        $this->assertSame("", $result->arguments);
        $this->assertSame([], $result->envVariables);
        $this->assertSame("<?php" . PHP_EOL . "echo \"test123\";" . PHP_EOL . "touch(__DIR__ . DIRECTORY_SEPARATOR . \"tmp1.txt\");" . PHP_EOL . "?>", $result->testCode);
        $this->assertSame("", $result->testFile);
        $this->assertSame([], $result->testRedirects);
        $this->assertFalse($result->requiresCgiBinary);
        $this->assertSame(false, $result->supposedToFail);
        $this->assertSame(false, $result->flaky);
        $this->assertSame([], $result->expectedHeaders);
        $this->assertSame("test123", $result->expectedText);
        $this->assertSame("", $result->expectedTextFile);
        $this->assertSame("", $result->expectedPattern);
        $this->assertSame("", $result->expectedPatternFile);
        $this->assertSame("", $result->expectedRegex);
        $this->assertSame("", $result->expectedRegexFile);
        $this->assertSame("<?php unlink(__DIR__ . DIRECTORY_SEPARATOR . \"tmp1.txt\") ?>", $result->cleanCode);

        $result = $parser->parse(__DIR__ . DIRECTORY_SEPARATOR . "test_cgi.phpt");
        $this->assertSame("Test CGI", $result->testName);
        $this->assertSame("", $result->testDescription);
        $this->assertSame("", $result->skipCode);
        $this->assertSame([], $result->conflictingKeys);
        $this->assertSame([], $result->requiredExtensions);
        $this->assertSame("", $result->input);
        $this->assertSame([], $result->iniSettings);
        $this->assertSame("", $result->arguments);
        $this->assertSame([], $result->envVariables);
        $this->assertSame("<?php" . PHP_EOL . "echo \"test123\";" . PHP_EOL . "?>", $result->testCode);
        $this->assertSame("", $result->testFile);
        $this->assertSame([], $result->testRedirects);
        $this->assertTrue($result->requiresCgiBinary);
        $this->assertSame(false, $result->supposedToFail);
        $this->assertSame(false, $result->flaky);
        $this->assertSame([], $result->expectedHeaders);
        $this->assertSame("test123", $result->expectedText);
        $this->assertSame("", $result->expectedTextFile);
        $this->assertSame("", $result->expectedPattern);
        $this->assertSame("", $result->expectedPatternFile);
        $this->assertSame("", $result->expectedRegex);
        $this->assertSame("", $result->expectedRegexFile);
        $this->assertSame("", $result->cleanCode);

        $result = $parser->parse(__DIR__ . DIRECTORY_SEPARATOR . "test_external.phpt", false);
        $this->assertSame("", $result->testDescription);
        $this->assertSame("Test external", $result->testName);
        $this->assertSame("", $result->skipCode);
        $this->assertSame([], $result->conflictingKeys);
        $this->assertSame([], $result->requiredExtensions);
        $this->assertSame("", $result->input);
        $this->assertSame([], $result->iniSettings);
        $this->assertSame("", $result->arguments);
        $this->assertSame([], $result->envVariables);
        $this->assertSame("", $result->testCode);
        $this->assertSame(__DIR__ . DIRECTORY_SEPARATOR . "test_external_script.php", $result->testFile);
        $this->assertSame([], $result->testRedirects);
        $this->assertFalse($result->requiresCgiBinary);
        $this->assertSame(false, $result->supposedToFail);
        $this->assertSame(false, $result->flaky);
        $this->assertSame([], $result->expectedHeaders);
        $this->assertSame("", $result->expectedText);
        $this->assertSame(__DIR__ . DIRECTORY_SEPARATOR . "test_external_output.txt", $result->expectedTextFile);
        $this->assertSame("", $result->expectedPattern);
        $this->assertSame("", $result->expectedPatternFile);
        $this->assertSame("", $result->expectedRegex);
        $this->assertSame("", $result->expectedRegexFile);
        $this->assertSame("", $result->cleanCode);

        $result = $parser->parse(__DIR__ . DIRECTORY_SEPARATOR . "test_fileeof.phpt");
        $this->assertSame("Test fileeof", $result->testName);
        $this->assertSame("", $result->testDescription);
        $this->assertSame("", $result->skipCode);
        $this->assertSame([], $result->conflictingKeys);
        $this->assertSame([], $result->requiredExtensions);
        $this->assertSame("", $result->input);
        $this->assertSame([], $result->iniSettings);
        $this->assertSame("", $result->arguments);
        $this->assertSame([], $result->envVariables);
        $this->assertSame("<?php" . PHP_EOL . "echo \"test123\";" . PHP_EOL . "//last line comment", $result->testCode);
        $this->assertSame("", $result->testFile);
        $this->assertSame([], $result->testRedirects);
        $this->assertFalse($result->requiresCgiBinary);
        $this->assertSame(false, $result->supposedToFail);
        $this->assertSame(false, $result->flaky);
        $this->assertSame([], $result->expectedHeaders);
        $this->assertSame("test123", $result->expectedText);
        $this->assertSame("", $result->expectedTextFile);
        $this->assertSame("", $result->expectedPattern);
        $this->assertSame("", $result->expectedPatternFile);
        $this->assertSame("", $result->expectedRegex);
        $this->assertSame("", $result->expectedRegexFile);
        $this->assertSame("", $result->cleanCode);

        $result = $parser->parse(__DIR__ . DIRECTORY_SEPARATOR . "test_extensions.phpt");
        $this->assertSame("Test extensions", $result->testName);
        $this->assertSame("", $result->testDescription);
        $this->assertSame("", $result->skipCode);
        $this->assertSame([], $result->conflictingKeys);
        $this->assertSame(["json", "abc", ], $result->requiredExtensions);
        $this->assertSame("", $result->input);
        $this->assertSame([], $result->iniSettings);
        $this->assertSame("", $result->arguments);
        $this->assertSame([], $result->envVariables);
        $this->assertSame("<?php" . PHP_EOL . "echo \"test123\";" . PHP_EOL . "?>", $result->testCode);
        $this->assertSame("", $result->testFile);
        $this->assertSame([], $result->testRedirects);
        $this->assertFalse($result->requiresCgiBinary);
        $this->assertSame(false, $result->supposedToFail);
        $this->assertSame(false, $result->flaky);
        $this->assertSame([], $result->expectedHeaders);
        $this->assertSame("test123", $result->expectedText);
        $this->assertSame("", $result->expectedTextFile);
        $this->assertSame("", $result->expectedPattern);
        $this->assertSame("", $result->expectedPatternFile);
        $this->assertSame("", $result->expectedRegex);
        $this->assertSame("", $result->expectedRegexFile);
        $this->assertSame("", $result->cleanCode);

        $filename = __DIR__ . DIRECTORY_SEPARATOR . "non-existing.phpt";
        $this->assertThrowsException(function () use ($parser, $filename) {
            $parser->parse($filename);
        }, FileNotFoundException::class, "File $filename does not exist or cannot be read");

        $filename = __DIR__ . DIRECTORY_SEPARATOR . "test_invalid1.phpt";
        $this->assertThrowsException(function () use ($parser, $filename) {
            $parser->parse($filename);
        }, RequiredSectionMissingException::class, "Required section TEST not found in file $filename");

        $filename = __DIR__ . DIRECTORY_SEPARATOR . "test_invalid2.phpt";
        $this->assertThrowsException(function () use ($parser, $filename) {
            $parser->parse($filename);
        }, RequiredSectionMissingException::class, "At least one of sections EXPECT, EXPECT_EXTERNAL, EXPECTREGEX, EXPECTREGEX_EXTERNAL is required, none found in file $filename");
    }
}
